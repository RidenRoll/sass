datasource postgres {
  provider = "postgresql"
  url      = env("POSTGRESQL_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  createdAt     DateTime       @default(now())
  firstName     String?
  id            String         @id @default(cuid())
  lastName      String?
  password      String
  roles         String[]
  subscriptions Subscription[]
  updatedAt     DateTime       @updatedAt
  username      String         @unique
}

model Subscription {
  cancelledAt           DateTime?
  createdAt             DateTime  @default(now())
  downgradedAt          DateTime?
  downgradedToPlanId    Int?
  endsAt                DateTime?
  id                    String    @id @default(cuid())
  invoice               Invoice?  @relation(fields: [invoiceId], references: [id])
  invoiceId             String?
  plan                  Plan?     @relation(fields: [planId], references: [id])
  planId                String?
  renewedAt             DateTime?
  renewedSubscriptionId Int?
  startsAt              DateTime?
  updatedAt             DateTime  @updatedAt
  upgradedAt            DateTime?
  upgradedToPlanId      Int?
  user                  User      @relation(fields: [userId], references: [id])
  userId                String
}

model Plan {
  createdAt         DateTime       @default(now())
  id                String         @id @default(cuid())
  monthsPerInterval Int?
  name              String?
  product           Product?       @relation(fields: [productId], references: [id])
  productId         String?
  subscriptions     Subscription[]
  updatedAt         DateTime       @updatedAt
}

model Invoice {
  createdAt        DateTime          @default(now())
  customer         Customer?         @relation(fields: [customerId], references: [id])
  customerId       String?
  dueDate          DateTime?
  id               String            @id @default(cuid())
  invoiceDate      DateTime?
  invoiceLineItems InvoiceLineItem[]
  subscriptions    Subscription[]
  updatedAt        DateTime          @updatedAt
}

model Product {
  createdAt        DateTime          @default(now())
  description      String?
  id               String            @id @default(cuid())
  invoiceLineItems InvoiceLineItem[]
  plans            Plan[]
  productPricings  ProductPricing[]
  updatedAt        DateTime          @updatedAt
}

model Customer {
  address1   String?
  address2   String?
  city       String?
  createdAt  DateTime  @default(now())
  currency   Currency? @relation(fields: [currencyId], references: [id])
  currencyId String?
  email      String?
  id         String    @id @default(cuid())
  invoices   Invoice[]
  name       String?
  phone      String?
  postalCode String?
  updatedAt  DateTime  @updatedAt
}

model ProductPricing {
  createdAt  DateTime  @default(now())
  Currency   Currency? @relation(fields: [CurrencyId], references: [id])
  CurrencyId String?
  endingAt   Float?
  id         String    @id @default(cuid())
  Price      Float?
  product    Product?  @relation(fields: [productId], references: [id])
  productId  String?
  startingAt Float?
  updatedAt  DateTime  @updatedAt
}

model Currency {
  createdAt       DateTime         @default(now())
  customers       Customer[]
  id              String           @id @default(cuid())
  name            String?
  productPricings ProductPricing[]
  updatedAt       DateTime         @updatedAt
}

model InvoiceLineItem {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  invoice   Invoice? @relation(fields: [invoiceId], references: [id])
  invoiceId String?
  product   Product? @relation(fields: [productId], references: [id])
  productId String?
  quantity  Int?
  rawAmount Float?
  updatedAt DateTime @updatedAt
}