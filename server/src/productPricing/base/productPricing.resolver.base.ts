/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateProductPricingArgs } from "./CreateProductPricingArgs";
import { UpdateProductPricingArgs } from "./UpdateProductPricingArgs";
import { DeleteProductPricingArgs } from "./DeleteProductPricingArgs";
import { ProductPricingFindManyArgs } from "./ProductPricingFindManyArgs";
import { ProductPricingFindUniqueArgs } from "./ProductPricingFindUniqueArgs";
import { ProductPricing } from "./ProductPricing";
import { Currency } from "../../currency/base/Currency";
import { Product } from "../../product/base/Product";
import { ProductPricingService } from "../productPricing.service";

@graphql.Resolver(() => ProductPricing)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class ProductPricingResolverBase {
  constructor(
    protected readonly service: ProductPricingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ProductPricing",
    action: "read",
    possession: "any",
  })
  async _productPricingsMeta(
    @graphql.Args() args: ProductPricingFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ProductPricing])
  @nestAccessControl.UseRoles({
    resource: "ProductPricing",
    action: "read",
    possession: "any",
  })
  async productPricings(
    @graphql.Args() args: ProductPricingFindManyArgs
  ): Promise<ProductPricing[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ProductPricing, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ProductPricing",
    action: "read",
    possession: "own",
  })
  async productPricing(
    @graphql.Args() args: ProductPricingFindUniqueArgs
  ): Promise<ProductPricing | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProductPricing)
  @nestAccessControl.UseRoles({
    resource: "ProductPricing",
    action: "create",
    possession: "any",
  })
  async createProductPricing(
    @graphql.Args() args: CreateProductPricingArgs
  ): Promise<ProductPricing> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        Currency: args.data.Currency
          ? {
              connect: args.data.Currency,
            }
          : undefined,

        product: args.data.product
          ? {
              connect: args.data.product,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProductPricing)
  @nestAccessControl.UseRoles({
    resource: "ProductPricing",
    action: "update",
    possession: "any",
  })
  async updateProductPricing(
    @graphql.Args() args: UpdateProductPricingArgs
  ): Promise<ProductPricing | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          Currency: args.data.Currency
            ? {
                connect: args.data.Currency,
              }
            : undefined,

          product: args.data.product
            ? {
                connect: args.data.product,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProductPricing)
  @nestAccessControl.UseRoles({
    resource: "ProductPricing",
    action: "delete",
    possession: "any",
  })
  async deleteProductPricing(
    @graphql.Args() args: DeleteProductPricingArgs
  ): Promise<ProductPricing | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Currency, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Currency",
    action: "read",
    possession: "any",
  })
  async currency(
    @graphql.Parent() parent: ProductPricing
  ): Promise<Currency | null> {
    const result = await this.service.getCurrency(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Product, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "any",
  })
  async product(
    @graphql.Parent() parent: ProductPricing
  ): Promise<Product | null> {
    const result = await this.service.getProduct(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
