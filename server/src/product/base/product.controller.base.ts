/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProductService } from "../product.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ProductCreateInput } from "./ProductCreateInput";
import { ProductWhereInput } from "./ProductWhereInput";
import { ProductWhereUniqueInput } from "./ProductWhereUniqueInput";
import { ProductFindManyArgs } from "./ProductFindManyArgs";
import { ProductUpdateInput } from "./ProductUpdateInput";
import { Product } from "./Product";
import { InvoiceLineItemFindManyArgs } from "../../invoiceLineItem/base/InvoiceLineItemFindManyArgs";
import { InvoiceLineItem } from "../../invoiceLineItem/base/InvoiceLineItem";
import { InvoiceLineItemWhereUniqueInput } from "../../invoiceLineItem/base/InvoiceLineItemWhereUniqueInput";
import { PlanFindManyArgs } from "../../plan/base/PlanFindManyArgs";
import { Plan } from "../../plan/base/Plan";
import { PlanWhereUniqueInput } from "../../plan/base/PlanWhereUniqueInput";
import { ProductPricingFindManyArgs } from "../../productPricing/base/ProductPricingFindManyArgs";
import { Currency } from "../../currency/base/Currency";
import { ProductPricing } from "../../productPricing/base/ProductPricing";
import { ProductPricingWhereUniqueInput } from "../../productPricing/base/ProductPricingWhereUniqueInput";
@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ProductControllerBase {
  constructor(
    protected readonly service: ProductService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "create",
    possession: "any",
  })
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Product })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async create(@common.Body() data: ProductCreateInput): Promise<Product> {
    return await this.service.create({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "any",
  })
  @common.Get()
  @swagger.ApiOkResponse({ type: [Product] })
  @swagger.ApiForbiddenResponse()
  @ApiNestedQuery(ProductFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<Product[]> {
    const args = plainToClass(ProductFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "own",
  })
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Product })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async findOne(
    @common.Param() params: ProductWhereUniqueInput
  ): Promise<Product | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Product })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async update(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() data: ProductUpdateInput
  ): Promise<Product | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "delete",
    possession: "any",
  })
  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Product })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async delete(
    @common.Param() params: ProductWhereUniqueInput
  ): Promise<Product | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "InvoiceLineItem",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/invoiceLineItems")
  @ApiNestedQuery(InvoiceLineItemFindManyArgs)
  async findManyInvoiceLineItems(
    @common.Req() request: Request,
    @common.Param() params: ProductWhereUniqueInput
  ): Promise<InvoiceLineItem[]> {
    const query = plainToClass(InvoiceLineItemFindManyArgs, request.query);
    const results = await this.service.findInvoiceLineItems(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        invoice: {
          select: {
            id: true,
          },
        },

        product: {
          select: {
            id: true,
          },
        },

        quantity: true,
        rawAmount: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/invoiceLineItems")
  async connectInvoiceLineItems(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: InvoiceLineItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoiceLineItems: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/invoiceLineItems")
  async updateInvoiceLineItems(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: InvoiceLineItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoiceLineItems: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/invoiceLineItems")
  async disconnectInvoiceLineItems(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: InvoiceLineItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoiceLineItems: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Plan",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/plans")
  @ApiNestedQuery(PlanFindManyArgs)
  async findManyPlans(
    @common.Req() request: Request,
    @common.Param() params: ProductWhereUniqueInput
  ): Promise<Plan[]> {
    const query = plainToClass(PlanFindManyArgs, request.query);
    const results = await this.service.findPlans(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        monthsPerInterval: true,
        name: true,

        product: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/plans")
  async connectPlans(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: PlanWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      plans: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/plans")
  async updatePlans(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: PlanWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      plans: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/plans")
  async disconnectPlans(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: PlanWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      plans: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "ProductPricing",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/productPricings")
  @ApiNestedQuery(ProductPricingFindManyArgs)
  async findManyProductPricings(
    @common.Req() request: Request,
    @common.Param() params: ProductWhereUniqueInput
  ): Promise<ProductPricing[]> {
    const query = plainToClass(ProductPricingFindManyArgs, request.query);
    const results = await this.service.findProductPricings(params.id, {
      ...query,
      select: {
        createdAt: true,

        Currency: {
          select: {
            id: true,
          },
        },

        endingAt: true,
        id: true,
        Price: true,

        product: {
          select: {
            id: true,
          },
        },

        startingAt: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/productPricings")
  async connectProductPricings(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: ProductPricingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productPricings: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/productPricings")
  async updateProductPricings(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: ProductPricingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productPricings: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/productPricings")
  async disconnectProductPricings(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: ProductPricingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productPricings: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
